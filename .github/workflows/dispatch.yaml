---
name: DISPATCH

on:
  workflow_call:
    inputs:
      chrome-extension:
        required: false
        type: string
        default: "false"
      pypi-extension:
        required: false
        type: string
        default: "false"
      gnome-extension:
        required: false
        type: string
        default: "false"
      basic:
        required: false
        type: string
        default: "false"

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    name: Validate code
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Disable spell check rules
        run : |-
          echo "disable=SC2086" > ~/.shellcheckrc

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: false
          VALIDATE_PYTHON_MYPY: false
          VALIDATE_PYTHON_FLAKE8: false          
          VALIDATE_GITHUB_ACTIONS: false
          VALIDATE_NATURAL_LANGUAGE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  basic-version-bump:
    if: inputs.basic != 'false'
    runs-on: ubuntu-latest
    needs: static-analysis
    name: Basic bump version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Bump version  
        run: |-
          if ! test -f version; then echo "version=0.0.1" > version; fi
          version=$(grep 'version=.*' version | awk -F'=' '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i version

      - name: Push changes
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  chrome-extension-bump-version:
    if: inputs.chrome-extension != 'false'
    name: Chrome bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'chrome-plugin/**'
              
      - name: Bump version
        if: steps.changes.outputs.src == 'true'
        run: |-
          version=$(grep '"version": ".*",' chrome-plugin/manifest.json | awk -F'"' '{print $4}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i chrome-plugin/manifest.json
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  chrome-extension-build:
    if: inputs.chrome-extension != 'false'   
    name: Chrome extension build
    needs: chrome-extension-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'chrome-plugin/**'  
  
      - name: Build
        if: steps.changes.outputs.src == 'true'
        run: |-
          cd chrome-plugin && zip -r ../chrome-extension-${{ github.sha }}.zip .
  
      - name: Archive chrome-extension artifact
        if: steps.changes.outputs.src == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: chrome-extension-${{ github.sha }}
          path: chrome-extension-${{ github.sha }}.zip

  chrome-extension-upload:
    if: inputs.chrome-extension != 'false'   
    name: Chrome upload extension
    runs-on: ubuntu-latest
    needs: chrome-extension-build
    env:
      EXTENSION_ID: ${{ inputs.chrome-extension }}

    steps:
      - name: Download bundle artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-extension-${{ github.sha }}

      - name: Install webstore cli
        run: |-
          npm install -g chrome-webstore-upload-cli

      - name: Upload step
        run: |-
          chrome-webstore-upload upload --source chrome-extension-${{ github.sha }}.zip --extension-id ${{ env.EXTENSION_ID }} --client-id ${{ secrets.CI_GOOGLE_CLIENT_ID }} --client-secret ${{ secrets.CI_GOOGLE_CLIENT_SECRET }} --refresh-token ${{ secrets.CI_GOOGLE_REFRESH_TOKEN }} --auto-publish

      
  pypi-bump-version:
    if: inputs.pypi-extension != 'false'
    name: PyPI bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '*/**'
              - 'setup.py'
              - 'pyproject.toml'
              - 'PKG-INFO'
              
      - name: Bump
        if: steps.changes.outputs.src == 'true'
        run: |-
          version=$(grep '^Version:' PKG-INFO | sed 's/Version: //')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i PKG-INFO
          sed "s/$version/$next/" -i pyproject.toml
          sed "s/$version/$next/" -i setup.py
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  pypi-build-and-upload-package:
    if: inputs.pypi-extension != 'false'
    name: Pypi module build
    needs: pypi-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
     
      - name: Build
        run: |-
          pip3 install trove-classifiers ptyprocess msgpack lockfile distlib tomlkit tomli shellingham rapidfuzz pyrsistent poetry-core platformdirs pkginfo pexpect packaging jeepney jaraco.classes filelock dulwich crashtest cachecontrol virtualenv SecretStorage jsonschema cleo keyring poetry-plugin-export poetry bumpver
          python3 -m pip install --upgrade build
          python3 -m pip install --upgrade twine
          python3 -m build
    
      - name: Upload step
        run: |-
          # shellcheck disable=SC2035
          printf "[pypi]\n  username = __token__\n  password = ${{ secrets.PYPI_TOKEN }}" > ~/.pypirc
          # shellcheck disable=SC2035
          python3 -m twine upload --verbose --non-interactive --config-file ~/.pypirc --repository pypi dist/*


  gnome-bump-version:
    if: inputs.gnome-extension != 'false' 
    name: Gnome bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '*.js'
              - '*.json'
              - '*.css'
              - 'images/**'
              - 'schemas/**'
              - 'icons/**'
              
      - name: Bump
        if: steps.changes.outputs.src == 'true'
        # shellcheck disable=SC2086
        run: |-
          # shellcheck disable=SC2086
          version=$(grep '"version": .*' metadata.json | awk '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i metadata.json
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  gnome-build-and-upload:
    if: inputs.gnome-extension != 'false'
    name: Gnome extension build
    needs: gnome-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
                      
      - name: Build
        run: |-
          # shellcheck disable=SC2035
          sed -i 's#^\s\+log#// log#g' *.js 
          # shellcheck disable=SC2035
          zip gnome-extension-${{ github.sha }}.zip icons/** schemas/** metadata.json *.js *.css
      - name: Install publisher
        run: |-
          pip install gnome-extension-publisher
          
      - name: Publish
        run: |-
          bash -c "gep publisharchive --username \"${{ secrets.CI_USERNAME }}\" --password \"${{ secrets.CI_PASSWORD }}\" --file gnome-extension-${{ github.sha }}.zip";
      
      
  rebuild-profile:   
    name: Dispatch rebuild profile
    runs-on: ubuntu-latest    
    needs: [gnome-build-and-upload, pypi-build-and-upload-package, chrome-extension-upload, basic-version-bump]
    if: |
      always() &&
      (needs.gnome-build-and-upload.result == 'success' || needs.gnome-build-and-upload.result == 'skipped') &&
      (needs.pypi-build-and-upload-package.result == 'success' || needs.pypi-build-and-upload-package.result == 'skipped') &&
      (needs.chrome-extension-upload.result == 'success' || needs.chrome-extension-upload.result == 'skipped') &&
      (needs.basic-version-bump.result == 'success' || needs.basic-version-bump.result == 'skipped')
    steps:
      - name: Rebuild profile
        run: |-
          curl -H 'Accept: application/vnd.github+json' -H 'Authorization: token ${{ secrets.PROFILE_HOOK }}' --request POST --data '{"event_type": "cicd-hook"}' https://api.github.com/repos/dmzoneill/dmzoneill/dispatches
