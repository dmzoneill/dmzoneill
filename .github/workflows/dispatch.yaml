---
name: DISPATCH

on:
  workflow_call:
    inputs:
      npmjs:
        required: false
        type: string
        default: "false"
      chrome-extension:
        required: false
        type: string
        default: "false"
      pypi-extension:
        required: false
        type: string
        default: "false"
      gnome-extension:
        required: false
        type: string
        default: "false"
      basic:
        required: false
        type: string
        default: "false"
      pling:
        required: false
        type: string
        default: "false"
      VALIDATE_ALL_CODEBASE:
        required: false
        type: string
        default: "false"
      VALIDATE_ANSIBLE:
        required: false
        type: string
        default: "true"
      VALIDATE_ARM:
        required: false
        type: string
        default: "true"
      VALIDATE_BASH:
        required: false
        type: string
        default: "true"
      VALIDATE_BASH_EXEC:
        required: false
        type: string
        default: "true"
      VALIDATE_CPP:
        required: false
        type: string
        default: "true"
      VALIDATE_CHECKOV:
        required: false
        type: string
        default: "true"
      VALIDATE_CLANG_FORMAT:
        required: false
        type: string
        default: "true"
      VALIDATE_CLOJURE:
        required: false
        type: string
        default: "true"
      VALIDATE_CLOUDFORMATION:
        required: false
        type: string
        default: "true"
      VALIDATE_COFFEESCRIPT:
        required: false
        type: string
        default: "true"
      VALIDATE_CSHARP:
        required: false
        type: string
        default: "true"
      VALIDATE_CSS:
        required: false
        type: string
        default: "true"
      VALIDATE_DART:
        required: false
        type: string
        default: "true"
      VALIDATE_DOCKERFILE_HADOLINT:
        required: false
        type: string
        default: "true"
      VALIDATE_EDITORCONFIG:
        required: false
        type: string
        default: "true"
      VALIDATE_ENV:
        required: false
        type: string
        default: "true"
      VALIDATE_GHERKIN:
        required: false
        type: string
        default: "true"
      VALIDATE_GITHUB_ACTIONS:
        required: false
        type: string
        default: "true"
      VALIDATE_GITLEAKS:
        required: false
        type: string
        default: "true"
      VALIDATE_GO:
        required: false
        type: string
        default: "true"
      VALIDATE_GO_MODULES:
        required: false
        type: string
        default: "true"
      VALIDATE_GOOGLE_JAVA_FORMAT:
        required: false
        type: string
        default: "true"
      VALIDATE_GROOVY:
        required: false
        type: string
        default: "true"
      VALIDATE_HTML:
        required: false
        type: string
        default: "true"
      VALIDATE_JAVA:
        required: false
        type: string
        default: "true"
      VALIDATE_JAVASCRIPT_ES:
        required: false
        type: string
        default: "true"
      VALIDATE_JAVASCRIPT_STANDARD:
        required: false
        type: string
        default: "true"
      VALIDATE_JSCPD:
        required: false
        type: string
        default: "true"
      VALIDATE_JSON:
        required: false
        type: string
        default: "true"
      VALIDATE_JSX:
        required: false
        type: string
        default: "true"
      VALIDATE_KOTLIN:
        required: false
        type: string
        default: "true"
      VALIDATE_KUBERNETES_KUBECONFORM:
        required: false
        type: string
        default: "true"
      VALIDATE_LATEX:
        required: false
        type: string
        default: "true"
      VALIDATE_LUA:
        required: false
        type: string
        default: "true"
      VALIDATE_MARKDOWN:
        required: false
        type: string
        default: "true"
      VALIDATE_NATURAL_LANGUAGE:
        required: false
        type: string
        default: "true"
      VALIDATE_OPENAPI:
        required: false
        type: string
        default: "true"
      VALIDATE_PERL:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_BUILTIN:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_PHPCS:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_PHPSTAN:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_PSALM:
        required: false
        type: string
        default: "true"
      VALIDATE_POWERSHELL:
        required: false
        type: string
        default: "true"
      VALIDATE_PROTOBUF:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON:
        required: false
        type: string
        default: "true"        
      VALIDATE_PYTHON_BLACK:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_FLAKE8:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_ISORT:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_MYPY:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_PYLINT:
        required: false
        type: string
        default: "true"
      VALIDATE_R:
        required: false
        type: string
        default: "true"
      VALIDATE_RAKU:
        required: false
        type: string
        default: "true"
      VALIDATE_RENOVATE:
        required: false
        type: string
        default: "true"
      VALIDATE_RUBY:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_2015:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_2018:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_2021:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_CLIPPY:
        required: false
        type: string
        default: "true"
      VALIDATE_SCALAFMT:
        required: false
        type: string
        default: "true"
      VALIDATE_SHELL_SHFMT:
        required: false
        type: string
        default: "true"
      VALIDATE_SNAKEMAKE_LINT:
        required: false
        type: string
        default: "true"
      VALIDATE_SNAKEMAKE_SNAKEFMT:
        required: false
        type: string
        default: "true"
      VALIDATE_STATES:
        required: false
        type: string
        default: "true"
      VALIDATE_SQL:
        required: false
        type: string
        default: "true"        
      VALIDATE_SQLFLUFF:
        required: false
        type: string
        default: "true"
      VALIDATE_TEKTON:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAFORM_FMT:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAFORM_TERRASCAN:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAFORM_TFLINT:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAGRUNT:
        required: false
        type: string
        default: "true"
      VALIDATE_TSX:
        required: false
        type: string
        default: "true"
      VALIDATE_TYPESCRIPT_ES:
        required: false
        type: string
        default: "true"
      VALIDATE_TYPESCRIPT_STANDARD:
        required: false
        type: string
        default: "true"
      VALIDATE_XML:
        required: false
        type: string
        default: "true"
      VALIDATE_YAML:
        required: false
        type: string
        default: "true"


jobs:
  static-analysis:
    runs-on: ubuntu-latest
    name: Validate code
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configure linters
        run : |-
          echo "disable=SC2086" > ~/.shellcheckrc
          mkdir -vp .github/linters/config/
          curl -o .github/linters/config/rubocop.yml https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/config/rubocop.yml
          curl -o .github/linters/.jscpd.json https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.jscpd.json
          curl -o .github/linters/.ruby-lint.yml https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.ruby-lint.yml
          curl -o .github/linters/.stylelintrc.json https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.stylelintrc.json
          curl -o .github/linters/.htmlhintrc https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.htmlhintrc
          curl -o .github/linters/.eslintrc.json https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.eslintrc.json

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          {{ if ne(inputs.VALIDATE_ALL_CODEBASE, 'false') }}
            VALIDATE_ALL_CODEBASE: ${{ inputs.VALIDATE_ALL_CODEBASE }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_ANSIBLE, 'false') }}
            VALIDATE_ANSIBLE: ${{ inputs.VALIDATE_ANSIBLE }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_ARM, 'false') }}
            VALIDATE_ARM: ${{ inputs.VALIDATE_ARM }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_BASH, 'false') }}
            VALIDATE_BASH: ${{ inputs.VALIDATE_BASH }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_BASH_EXEC, 'false') }}
            VALIDATE_BASH_EXEC: ${{ inputs.VALIDATE_BASH_EXEC }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_CPP, 'false') }}
            VALIDATE_CPP: ${{ inputs.VALIDATE_CPP }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_CHECKOV, 'false') }}
            VALIDATE_CHECKOV: ${{ inputs.VALIDATE_CHECKOV }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_CLANG_FORMAT, 'false') }}
            VALIDATE_CLANG_FORMAT: ${{ inputs.VALIDATE_CLANG_FORMAT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_CLOJURE, 'false') }}
            VALIDATE_CLOJURE: ${{ inputs.VALIDATE_CLOJURE }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_CLOUDFORMATION, 'false') }}
            VALIDATE_CLOUDFORMATION: ${{ inputs.VALIDATE_CLOUDFORMATION }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_COFFEESCRIPT, 'false') }}
            VALIDATE_COFFEESCRIPT: ${{ inputs.VALIDATE_COFFEESCRIPT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_CSHARP, 'false') }}
            VALIDATE_CSHARP: ${{ inputs.VALIDATE_CSHARP }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_CSS, 'false') }}
            VALIDATE_CSS: ${{ inputs.VALIDATE_CSS }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_DART, 'false') }}
            VALIDATE_DART: ${{ inputs.VALIDATE_DART }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_DOCKERFILE_HADOLINT, 'false') }}
            VALIDATE_DOCKERFILE_HADOLINT: ${{ inputs.VALIDATE_DOCKERFILE_HADOLINT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_EDITORCONFIG, 'false') }}
            VALIDATE_EDITORCONFIG: ${{ inputs.VALIDATE_EDITORCONFIG }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_ENV, 'false') }}
            VALIDATE_ENV: ${{ inputs.VALIDATE_ENV }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_GHERKIN, 'false') }}
            VALIDATE_GHERKIN: ${{ inputs.VALIDATE_GHERKIN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_GITHUB_ACTIONS, 'false') }}
            VALIDATE_GITHUB_ACTIONS: ${{ inputs.VALIDATE_GITHUB_ACTIONS }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_GITLEAKS, 'false') }}
            VALIDATE_GITLEAKS: ${{ inputs.VALIDATE_GITLEAKS }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_GO, 'false') }}
            VALIDATE_GO: ${{ inputs.VALIDATE_GO }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_GO_MODULES, 'false') }}
            VALIDATE_GO_MODULES: ${{ inputs.VALIDATE_GO_MODULES }}
          {{ end }}

          {{ if ne(inputs.VALIDATE_GOOGLE_JAVA_FORMAT, 'false') }}
            VALIDATE_GOOGLE_JAVA_FORMAT: ${{ inputs.VALIDATE_GOOGLE_JAVA_FORMAT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_GROOVY, 'false') }}
            VALIDATE_GROOVY: ${{ inputs.VALIDATE_GROOVY }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_HTML, 'false') }}
            VALIDATE_HTML: ${{ inputs.VALIDATE_HTML }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_JAVA, 'false') }}
            VALIDATE_JAVA: ${{ inputs.VALIDATE_JAVA }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_JAVASCRIPT_ES, 'false') }}
            VALIDATE_JAVASCRIPT_ES: ${{ inputs.VALIDATE_JAVASCRIPT_ES }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_JAVASCRIPT_STANDARD, 'false') }}
            VALIDATE_JAVASCRIPT_STANDARD: ${{ inputs.VALIDATE_JAVASCRIPT_STANDARD }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_JSCPD, 'false') }}
            VALIDATE_JSCPD: ${{ inputs.VALIDATE_JSCPD }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_JSON, 'false') }}
            VALIDATE_JSON: ${{ inputs.VALIDATE_JSON }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_JSX, 'false') }}
            VALIDATE_JSX: ${{ inputs.VALIDATE_JSX }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_KOTLIN, 'false') }}
            VALIDATE_KOTLIN: ${{ inputs.VALIDATE_KOTLIN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_KUBERNETES_KUBECONFORM, 'false') }}
            VALIDATE_KUBERNETES_KUBECONFORM: ${{ inputs.VALIDATE_KUBERNETES_KUBECONFORM }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_LATEX, 'false') }}
            VALIDATE_LATEX: ${{ inputs.VALIDATE_LATEX }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_LUA, 'false') }}
            VALIDATE_LUA: ${{ inputs.VALIDATE_LUA }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_MARKDOWN, 'false') }}
            VALIDATE_MARKDOWN: ${{ inputs.VALIDATE_MARKDOWN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_NATURAL_LANGUAGE, 'false') }}
            VALIDATE_NATURAL_LANGUAGE: ${{ inputs.VALIDATE_NATURAL_LANGUAGE }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_OPENAPI, 'false') }}
            VALIDATE_OPENAPI: ${{ inputs.VALIDATE_OPENAPI }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PERL, 'false') }}
            VALIDATE_PERL: ${{ inputs.VALIDATE_PERL }}
          {{ end }}

          {{ if ne(inputs.VALIDATE_PHP, 'false') }}
            VALIDATE_PHP: ${{ inputs.VALIDATE_PHP }}
          {{ end }}

          {{ if ne(inputs.VALIDATE_PHP_BUILTIN, 'false') }}
            VALIDATE_PHP_BUILTIN: ${{ inputs.VALIDATE_PHP_BUILTIN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PHP_PHPCS, 'false') }}
            VALIDATE_PHP_PHPCS: ${{ inputs.VALIDATE_PHP_PHPCS }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PHP_PHPSTAN, 'false') }}
            VALIDATE_PHP_PHPSTAN: ${{ inputs.VALIDATE_PHP_PHPSTAN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PHP_PSALM, 'false') }}
            VALIDATE_PHP_PSALM: ${{ inputs.VALIDATE_PHP_PSALM }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_POWERSHELL, 'false') }}
            VALIDATE_POWERSHELL: ${{ inputs.VALIDATE_POWERSHELL }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PROTOBUF, 'false') }}
            VALIDATE_PROTOBUF: ${{ inputs.VALIDATE_PROTOBUF }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON, 'false') }}
            VALIDATE_PYTHON: ${{ inputs.VALIDATE_PYTHON }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_BLACK, 'false') }}
            VALIDATE_PYTHON_BLACK: ${{ inputs.VALIDATE_PYTHON_BLACK }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_FLAKE8, 'false') }}
            VALIDATE_PYTHON_FLAKE8: ${{ inputs.VALIDATE_PYTHON_FLAKE8 }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_ISORT, 'false') }}
            VALIDATE_PYTHON_ISORT: ${{ inputs.VALIDATE_PYTHON_ISORT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_MYPY, 'false') }}
            VALIDATE_PYTHON_MYPY: ${{ inputs.VALIDATE_PYTHON_MYPY }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_PYLINT, 'false') }}
            VALIDATE_PYTHON_PYLINT: ${{ inputs.VALIDATE_PYTHON_PYLINT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_R, 'false') }}
            VALIDATE_R: ${{ inputs.VALIDATE_R }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RAKU, 'false') }}
            VALIDATE_RAKU: ${{ inputs.VALIDATE_RAKU }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RENOVATE, 'false') }}
            VALIDATE_RENOVATE: ${{ inputs.VALIDATE_RENOVATE }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RUBY, 'false') }}
            VALIDATE_RUBY: ${{ inputs.VALIDATE_RUBY }}
          {{ end }}

          {{ if ne(inputs.VALIDATE_PHP_BUILTIN, 'false') }}
            VALIDATE_PHP_BUILTIN: ${{ inputs.VALIDATE_PHP_BUILTIN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PHP_PHPCS, 'false') }}
            VALIDATE_PHP_PHPCS: ${{ inputs.VALIDATE_PHP_PHPCS }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PHP_PHPSTAN, 'false') }}
            VALIDATE_PHP_PHPSTAN: ${{ inputs.VALIDATE_PHP_PHPSTAN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PHP_PSALM, 'false') }}
            VALIDATE_PHP_PSALM: ${{ inputs.VALIDATE_PHP_PSALM }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_POWERSHELL, 'false') }}
            VALIDATE_POWERSHELL: ${{ inputs.VALIDATE_POWERSHELL }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PROTOBUF, 'false') }}
            VALIDATE_PROTOBUF: ${{ inputs.VALIDATE_PROTOBUF }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON, 'false') }}
            VALIDATE_PYTHON: ${{ inputs.VALIDATE_PYTHON }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_BLACK, 'false') }}
            VALIDATE_PYTHON_BLACK: ${{ inputs.VALIDATE_PYTHON_BLACK }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_FLAKE8, 'false') }}
            VALIDATE_PYTHON_FLAKE8: ${{ inputs.VALIDATE_PYTHON_FLAKE8 }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_ISORT, 'false') }}
            VALIDATE_PYTHON_ISORT: ${{ inputs.VALIDATE_PYTHON_ISORT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_MYPY, 'false') }}
            VALIDATE_PYTHON_MYPY: ${{ inputs.VALIDATE_PYTHON_MYPY }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_PYTHON_PYLINT, 'false') }}
            VALIDATE_PYTHON_PYLINT: ${{ inputs.VALIDATE_PYTHON_PYLINT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_R, 'false') }}
            VALIDATE_R: ${{ inputs.VALIDATE_R }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RAKU, 'false') }}
            VALIDATE_RAKU: ${{ inputs.VALIDATE_RAKU }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RENOVATE, 'false') }}
            VALIDATE_RENOVATE: ${{ inputs.VALIDATE_RENOVATE }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RUBY, 'false') }}
            VALIDATE_RUBY: ${{ inputs.VALIDATE_RUBY }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RUST_2015, 'false') }}
            VALIDATE_RUST_2015: ${{ inputs.VALIDATE_RUST_2015 }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RUST_2018, 'false') }}
            VALIDATE_RUST_2018: ${{ inputs.VALIDATE_RUST_2018 }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RUST_2021, 'false') }}
            VALIDATE_RUST_2021: ${{ inputs.VALIDATE_RUST_2021 }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_RUST_CLIPPY, 'false') }}
            VALIDATE_RUST_CLIPPY: ${{ inputs.VALIDATE_RUST_CLIPPY }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_SCALAFMT, 'false') }}
            VALIDATE_SCALAFMT: ${{ inputs.VALIDATE_SCALAFMT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_SHELL_SHFMT, 'false') }}
            VALIDATE_SHELL_SHFMT: ${{ inputs.VALIDATE_SHELL_SHFMT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_SNAKEMAKE_LINT, 'false') }}
            VALIDATE_SNAKEMAKE_LINT: ${{ inputs.VALIDATE_SNAKEMAKE_LINT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_SNAKEMAKE_SNAKEFMT, 'false') }}
            VALIDATE_SNAKEMAKE_SNAKEFMT: ${{ inputs.VALIDATE_SNAKEMAKE_SNAKEFMT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_STATES, 'false') }}
            VALIDATE_STATES: ${{ inputs.VALIDATE_STATES }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_SQL, 'false') }}
            VALIDATE_SQL: ${{ inputs.VALIDATE_SQL }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_SQLFLUFF, 'false') }}
            VALIDATE_SQLFLUFF: ${{ inputs.VALIDATE_SQLFLUFF }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TEKTON, 'false') }}
            VALIDATE_TEKTON: ${{ inputs.VALIDATE_TEKTON }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TERRAFORM_FMT, 'false') }}
            VALIDATE_TERRAFORM_FMT: ${{ inputs.VALIDATE_TERRAFORM_FMT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TERRAFORM_TERRASCAN, 'false') }}
            VALIDATE_TERRAFORM_TERRASCAN: ${{ inputs.VALIDATE_TERRAFORM_TERRASCAN }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TERRAFORM_TFLINT, 'false') }}
            VALIDATE_TERRAFORM_TFLINT: ${{ inputs.VALIDATE_TERRAFORM_TFLINT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TERRAGRUNT, 'false') }}
            VALIDATE_TERRAGRUNT: ${{ inputs.VALIDATE_TERRAGRUNT }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TSX, 'false') }}
            VALIDATE_TSX: ${{ inputs.VALIDATE_TSX }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TYPESCRIPT_ES, 'false') }}
            VALIDATE_TYPESCRIPT_ES: ${{ inputs.VALIDATE_TYPESCRIPT_ES }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_TYPESCRIPT_STANDARD, 'false') }}
            VALIDATE_TYPESCRIPT_STANDARD: ${{ inputs.VALIDATE_TYPESCRIPT_STANDARD }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_XML, 'false') }}
            VALIDATE_XML: ${{ inputs.VALIDATE_XML }}
          {{ end }}
          
          {{ if ne(inputs.VALIDATE_YAML, 'false') }}
            VALIDATE_YAML: ${{ inputs.VALIDATE_YAML }}
          {{ end }}

          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  basic-version-bump:
    if: inputs.basic != 'false'
    runs-on: ubuntu-latest
    needs: static-analysis
    name: Basic bump version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Bump version  
        run: |-
          if ! test -f version; then echo "version=0.0.1" > version; fi
          version=$(grep 'version=.*' version | awk -F'=' '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i version

      - name: Push changes
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  chrome-extension-bump-version:
    if: inputs.chrome-extension != 'false'
    name: Chrome bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'chrome-plugin/**'
              
      - name: Bump version
        if: steps.changes.outputs.src == 'true'
        run: |-
          version=$(grep '"version": ".*",' chrome-plugin/manifest.json | awk -F'"' '{print $4}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i chrome-plugin/manifest.json
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  chrome-extension-build:
    if: inputs.chrome-extension != 'false'   
    name: Chrome extension build
    needs: chrome-extension-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'chrome-plugin/**'  
  
      - name: Build
        if: steps.changes.outputs.src == 'true'
        run: |-
          cd chrome-plugin && zip -r ../chrome-extension-${{ github.sha }}.zip .
  
      - name: Archive chrome-extension artifact
        if: steps.changes.outputs.src == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: chrome-extension-${{ github.sha }}
          path: chrome-extension-${{ github.sha }}.zip

  chrome-extension-upload:
    if: inputs.chrome-extension != 'false'   
    name: Chrome upload extension
    runs-on: ubuntu-latest
    needs: chrome-extension-build
    env:
      EXTENSION_ID: ${{ inputs.chrome-extension }}

    steps:
      - name: Download bundle artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-extension-${{ github.sha }}

      - name: Install webstore cli
        run: |-
          npm install -g chrome-webstore-upload-cli

      - name: Upload step
        run: |-
          chrome-webstore-upload upload --source chrome-extension-${{ github.sha }}.zip --extension-id ${{ env.EXTENSION_ID }} --client-id ${{ secrets.CI_GOOGLE_CLIENT_ID }} --client-secret ${{ secrets.CI_GOOGLE_CLIENT_SECRET }} --refresh-token ${{ secrets.CI_GOOGLE_REFRESH_TOKEN }} --auto-publish

      
  pypi-bump-version:
    if: inputs.pypi-extension != 'false'
    name: PyPI bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '*/**'
              - 'setup.py'
              - 'pyproject.toml'
              - 'PKG-INFO'
              
      - name: Bump
        if: steps.changes.outputs.src == 'true'
        run: |-
          version=$(grep '^Version:' PKG-INFO | sed 's/Version: //')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i PKG-INFO
          sed "s/$version/$next/" -i pyproject.toml
          sed "s/$version/$next/" -i setup.py
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  pypi-build-and-upload-package:
    if: inputs.pypi-extension != 'false'
    name: Pypi module build
    needs: pypi-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
     
      - name: Build
        run: |-
          pip3 install trove-classifiers ptyprocess msgpack lockfile distlib tomlkit tomli shellingham rapidfuzz pyrsistent poetry-core platformdirs pkginfo pexpect packaging jeepney jaraco.classes filelock dulwich crashtest cachecontrol virtualenv SecretStorage jsonschema cleo keyring poetry-plugin-export poetry bumpver
          python3 -m pip install --upgrade build
          python3 -m pip install --upgrade twine
          python3 -m build
    
      - name: Upload step
        run: |-
          # shellcheck disable=SC2035
          printf "[pypi]\n  username = __token__\n  password = ${{ secrets.PYPI_TOKEN }}" > ~/.pypirc
          # shellcheck disable=SC2035
          python3 -m twine upload --verbose --non-interactive --config-file ~/.pypirc --repository pypi dist/*


  gnome-bump-version:
    if: inputs.gnome-extension != 'false' 
    name: Gnome bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '*.js'
              - '*.json'
              - '*.css'
              - 'images/**'
              - 'schemas/**'
              - 'icons/**'
              
      - name: Bump
        if: steps.changes.outputs.src == 'true'
        # shellcheck disable=SC2086
        run: |-
          # shellcheck disable=SC2086
          version=$(grep '"version": .*' metadata.json | awk '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i metadata.json
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  gnome-build-and-upload:
    if: inputs.gnome-extension != 'false'
    name: Gnome extension build
    needs: gnome-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
                      
      - name: Build
        run: |-
          # shellcheck disable=SC2035
          sed -i 's#^\s\+log#// log#g' *.js 
          # shellcheck disable=SC2035
          zip gnome-extension-${{ github.sha }}.zip icons/** schemas/** metadata.json *.js *.css
      - name: Install publisher
        run: |-
          pip install gnome-extension-publisher
          
      - name: Publish
        run: |-
          bash -c "gep publisharchive --username \"${{ secrets.CI_USERNAME }}\" --password \"${{ secrets.CI_PASSWORD }}\" --file gnome-extension-${{ github.sha }}.zip";
      
  pling-bump-version:
    if: inputs.pling != 'false'
    name: Pling bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
                      
      - name: Bump version  
        run: |-
          if ! test -f version; then echo "version=0.0.1" > version; fi
          version=$(grep 'version=.*' version | awk -F'=' '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i version
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  pling-build-and-upload:
    if: inputs.pling != 'false'
    name: Pling project build
    needs: pling-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
                      
      - name: Install publisher
        run: |-
          pip install pling-publisher
          
      - name: Publish
        run: |-
          bash -c "pling publish --username \"${{ secrets.CI_USERNAME }}\" --password \"${{ secrets.CI_PASSWORD }}\" --project-id ${{ inputs.pling }}";


  npmjs-bump-version:
    if: inputs.npmjs != 'false'
    name: npmjs bump version
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
                      
      - name: Bump version  
        run: |-
          if ! test -f version; then echo "version=0.0.1" > version; fi
          version=$(grep 'version=.*' version | awk -F'=' '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed "s/$version/$next/" -i version
          sed "s/$version/$next/" -i package.json          
  
      - name: Push changes
        if: steps.changes.outputs.src == 'true'
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main' #optional defaults to master

  npmjs-upload:
    if: inputs.npmjs != 'false'
    name: npmjs project build
    needs: npmjs-bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Publish
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM }}   


  rebuild-profile:   
    name: Dispatch rebuild profile
    runs-on: ubuntu-latest    
    needs: [gnome-build-and-upload, pypi-build-and-upload-package, chrome-extension-upload, basic-version-bump, pling-build-and-upload, npmjs-upload]
    if: |
      always() &&
      (
        needs.gnome-build-and-upload.result == 'success' || 
        needs.pypi-build-and-upload-package.result == 'success' ||
        needs.chrome-extension-upload.result == 'success' ||
        needs.basic-version-bump.result == 'success' ||
        needs.pling-build-and-upload.result == 'success'
      )
    steps:
      - name: Rebuild profile
        run: |-
          curl -H 'Accept: application/vnd.github+json' -H 'Authorization: token ${{ secrets.PROFILE_HOOK }}' --request POST --data '{"event_type": "cicd-hook"}' https://api.github.com/repos/dmzoneill/dmzoneill/dispatches
