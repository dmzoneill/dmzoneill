---
name: DISPATCH

on:
  workflow_call:
    inputs:
      test-ready:
        description: 'Whether tests should fail the job or not'
        required: false
        default: 'false'
        type: string
      npmjs:
        required: false
        type: string
        default: "false"
      chrome-extension:
        required: false
        type: string
        default: "false"
      pypi-extension:
        required: false
        type: string
        default: "false"
      gnome-extension:
        required: false
        type: string
        default: "false"
      basic:
        required: false
        type: string
        default: "false"
      pling:
        required: false
        type: string
        default: "false"
      deb-build:
        required: false
        type: string
        default: "false"
      rpm-build:
        required: false
        type: string
        default: "false"
      docker-build:
        required: false
        type: string
        default: "false"
      flatpak-build:
        required: false
        type: string
        default: "false"      
      VALIDATE_ALL_CODEBASE:
        required: false
        type: string
        default: "false"
      VALIDATE_ANSIBLE:
        required: false
        type: string
        default: "true"
      VALIDATE_ARM:
        required: false
        type: string
        default: "true"
      VALIDATE_BASH:
        required: false
        type: string
        default: "true"
      VALIDATE_BASH_EXEC:
        required: false
        type: string
        default: "true"
      VALIDATE_CPP:
        required: false
        type: string
        default: "true"
      VALIDATE_CHECKOV:
        required: false
        type: string
        default: "true"
      VALIDATE_CLANG_FORMAT:
        required: false
        type: string
        default: "true"
      VALIDATE_CLOJURE:
        required: false
        type: string
        default: "true"
      VALIDATE_CLOUDFORMATION:
        required: false
        type: string
        default: "true"
      VALIDATE_COFFEESCRIPT:
        required: false
        type: string
        default: "true"
      VALIDATE_CSHARP:
        required: false
        type: string
        default: "true"
      VALIDATE_CSS:
        required: false
        type: string
        default: "true"
      VALIDATE_DART:
        required: false
        type: string
        default: "true"
      VALIDATE_DOCKERFILE_HADOLINT:
        required: false
        type: string
        default: "true"
      VALIDATE_EDITORCONFIG:
        required: false
        type: string
        default: "true"
      VALIDATE_ENV:
        required: false
        type: string
        default: "true"
      VALIDATE_GHERKIN:
        required: false
        type: string
        default: "true"
      VALIDATE_GITHUB_ACTIONS:
        required: false
        type: string
        default: "true"
      VALIDATE_GITLEAKS:
        required: false
        type: string
        default: "true"
      VALIDATE_GO:
        required: false
        type: string
        default: "true"
      VALIDATE_GO_MODULES:
        required: false
        type: string
        default: "true"
      VALIDATE_GOOGLE_JAVA_FORMAT:
        required: false
        type: string
        default: "true"
      VALIDATE_GROOVY:
        required: false
        type: string
        default: "true"
      VALIDATE_HTML:
        required: false
        type: string
        default: "true"
      VALIDATE_JAVA:
        required: false
        type: string
        default: "true"
      VALIDATE_JAVASCRIPT_ES:
        required: false
        type: string
        default: "true"
      VALIDATE_JAVASCRIPT_STANDARD:
        required: false
        type: string
        default: "true"
      VALIDATE_JSCPD:
        required: false
        type: string
        default: "true"
      VALIDATE_JSON:
        required: false
        type: string
        default: "true"
      VALIDATE_JSX:
        required: false
        type: string
        default: "true"
      VALIDATE_KOTLIN:
        required: false
        type: string
        default: "true"
      VALIDATE_KUBERNETES_KUBECONFORM:
        required: false
        type: string
        default: "true"
      VALIDATE_LATEX:
        required: false
        type: string
        default: "true"
      VALIDATE_LUA:
        required: false
        type: string
        default: "true"
      VALIDATE_MARKDOWN:
        required: false
        type: string
        default: "true"
      VALIDATE_NATURAL_LANGUAGE:
        required: false
        type: string
        default: "true"
      VALIDATE_OPENAPI:
        required: false
        type: string
        default: "true"
      VALIDATE_PERL:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_BUILTIN:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_PHPCS:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_PHPSTAN:
        required: false
        type: string
        default: "true"
      VALIDATE_PHP_PSALM:
        required: false
        type: string
        default: "true"
      VALIDATE_POWERSHELL:
        required: false
        type: string
        default: "true"
      VALIDATE_PROTOBUF:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON:
        required: false
        type: string
        default: "true"        
      VALIDATE_PYTHON_BLACK:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_FLAKE8:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_ISORT:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_MYPY:
        required: false
        type: string
        default: "true"
      VALIDATE_PYTHON_PYLINT:
        required: false
        type: string
        default: "true"
      VALIDATE_R:
        required: false
        type: string
        default: "true"
      VALIDATE_RAKU:
        required: false
        type: string
        default: "true"
      VALIDATE_RENOVATE:
        required: false
        type: string
        default: "true"
      VALIDATE_RUBY:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_2015:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_2018:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_2021:
        required: false
        type: string
        default: "true"
      VALIDATE_RUST_CLIPPY:
        required: false
        type: string
        default: "true"
      VALIDATE_SCALAFMT:
        required: false
        type: string
        default: "true"
      VALIDATE_SHELL_SHFMT:
        required: false
        type: string
        default: "true"
      VALIDATE_SNAKEMAKE_LINT:
        required: false
        type: string
        default: "true"
      VALIDATE_SNAKEMAKE_SNAKEFMT:
        required: false
        type: string
        default: "true"
      VALIDATE_STATES:
        required: false
        type: string
        default: "true"
      VALIDATE_SQL:
        required: false
        type: string
        default: "true"        
      VALIDATE_SQLFLUFF:
        required: false
        type: string
        default: "true"
      VALIDATE_TEKTON:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAFORM_FMT:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAFORM_TERRASCAN:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAFORM_TFLINT:
        required: false
        type: string
        default: "true"
      VALIDATE_TERRAGRUNT:
        required: false
        type: string
        default: "true"
      VALIDATE_TSX:
        required: false
        type: string
        default: "true"
      VALIDATE_TYPESCRIPT_ES:
        required: false
        type: string
        default: "true"
      VALIDATE_TYPESCRIPT_STANDARD:
        required: false
        type: string
        default: "true"
      VALIDATE_XML:
        required: false
        type: string
        default: "true"
      VALIDATE_YAML:
        required: false
        type: string
        default: "true"


jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Project specific checks
        run: |
          if [ -f checks.sh ]; then
            echo "Running checks.sh..."
            exit $(./checks.sh)
          fi
        shell: bash
          
      - name: Configure linters
        run : |-
          echo "disable=SC2086" > ~/.shellcheckrc
          mkdir -vp .github/linters/config/
          curl -o .github/linters/config/rubocop.yml https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/config/rubocop.yml
          curl -o .github/linters/.jscpd.json https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.jscpd.json
          curl -o .github/linters/.ruby-lint.yml https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.ruby-lint.yml
          curl -o .github/linters/.stylelintrc.json https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.stylelintrc.json
          curl -o .github/linters/.htmlhintrc https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.htmlhintrc
          curl -o .github/linters/.eslintrc.json https://raw.githubusercontent.com/dmzoneill/dmzoneill/main/.github/linters/.eslintrc.json
      
      - name: Set environment variables
        run: |
          echo "DEFAULT_BRANCH=main" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          
          if [ "${{ inputs.VALIDATE_ALL_CODEBASE }}" != "true" ]; then
            echo "VALIDATE_ALL_CODEBASE=${{ inputs.VALIDATE_ALL_CODEBASE }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_ANSIBLE }}" != "true" ]; then
            echo "VALIDATE_ANSIBLE=${{ inputs.VALIDATE_ANSIBLE }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_ARM }}" != "true" ]; then
            echo "VALIDATE_ARM=${{ inputs.VALIDATE_ARM }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_BASH }}" != "true" ]; then
            echo "VALIDATE_BASH=${{ inputs.VALIDATE_BASH }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_BASH_EXEC }}" != "true" ]; then
            echo "VALIDATE_BASH_EXEC=${{ inputs.VALIDATE_BASH_EXEC }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_CPP }}" != "true" ]; then
            echo "VALIDATE_CPP=${{ inputs.VALIDATE_CPP }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_CHECKOV }}" != "true" ]; then
            echo "VALIDATE_CHECKOV=${{ inputs.VALIDATE_CHECKOV }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_CLANG_FORMAT }}" != "true" ]; then
            echo "VALIDATE_CLANG_FORMAT=${{ inputs.VALIDATE_CLANG_FORMAT }}" >> $GITHUB_ENV
          fi
          
               if [ "${{ inputs.VALIDATE_DART }}" != "true" ]; then
            echo "VALIDATE_DART=${{ inputs.VALIDATE_DART }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_DOCKERFILE_HADOLINT }}" != "true" ]; then
            echo "VALIDATE_DOCKERFILE_HADOLINT=${{ inputs.VALIDATE_DOCKERFILE_HADOLINT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_EDITORCONFIG }}" != "true" ]; then
            echo "VALIDATE_EDITORCONFIG=${{ inputs.VALIDATE_EDITORCONFIG }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_ENV }}" != "true" ]; then
            echo "VALIDATE_ENV=${{ inputs.VALIDATE_ENV }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_GHERKIN }}" != "true" ]; then
            echo "VALIDATE_GHERKIN=${{ inputs.VALIDATE_GHERKIN }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_GITHUB_ACTIONS }}" != "true" ]; then
            echo "VALIDATE_GITHUB_ACTIONS=${{ inputs.VALIDATE_GITHUB_ACTIONS }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_GITLEAKS }}" != "true" ]; then
            echo "VALIDATE_GITLEAKS=${{ inputs.VALIDATE_GITLEAKS }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_GO }}" != "true" ]; then
            echo "VALIDATE_GO=${{ inputs.VALIDATE_GO }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_GO_MODULES }}" != "true" ]; then
            echo "VALIDATE_GO_MODULES=${{ inputs.VALIDATE_GO_MODULES }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_GOOGLE_JAVA_FORMAT }}" != "true" ]; then
            echo "VALIDATE_GOOGLE_JAVA_FORMAT=${{ inputs.VALIDATE_GOOGLE_JAVA_FORMAT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_GROOVY }}" != "true" ]; then
            echo "VALIDATE_GROOVY=${{ inputs.VALIDATE_GROOVY }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_HTML }}" != "true" ]; then
            echo "VALIDATE_HTML=${{ inputs.VALIDATE_HTML }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_JAVA }}" != "true" ]; then
            echo "VALIDATE_JAVA=${{ inputs.VALIDATE_JAVA }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_JAVASCRIPT_ES }}" != "true" ]; then
            echo "VALIDATE_JAVASCRIPT_ES=${{ inputs.VALIDATE_JAVASCRIPT_ES }}" >> $GITHUB_ENV
          fi
               
            if [ "${{ inputs.VALIDATE_LUA }}" != "true" ]; then
            echo "VALIDATE_LUA=${{ inputs.VALIDATE_LUA }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_MARKDOWN }}" != "true" ]; then
            echo "VALIDATE_MARKDOWN=${{ inputs.VALIDATE_MARKDOWN }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_NATURAL_LANGUAGE }}" != "true" ]; then
            echo "VALIDATE_NATURAL_LANGUAGE=${{ inputs.VALIDATE_NATURAL_LANGUAGE }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_OPENAPI }}" != "true" ]; then
            echo "VALIDATE_OPENAPI=${{ inputs.VALIDATE_OPENAPI }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PERL }}" != "true" ]; then
            echo "VALIDATE_PERL=${{ inputs.VALIDATE_PERL }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP }}" != "true" ]; then
            echo "VALIDATE_PHP=${{ inputs.VALIDATE_PHP }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_BUILTIN }}" != "true" ]; then
            echo "VALIDATE_PHP_BUILTIN=${{ inputs.VALIDATE_PHP_BUILTIN }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_PHPCS }}" != "true" ]; then
            echo "VALIDATE_PHP_PHPCS=${{ inputs.VALIDATE_PHP_PHPCS }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_PHPSTAN }}" != "true" ]; then
            echo "VALIDATE_PHP_PHPSTAN=${{ inputs.VALIDATE_PHP_PHPSTAN }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_PSALM }}" != "true" ]; then
            echo "VALIDATE_PHP_PSALM=${{ inputs.VALIDATE_PHP_PSALM }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_POWERSHELL }}" != "true" ]; then
            echo "VALIDATE_POWERSHELL=${{ inputs.VALIDATE_POWERSHELL }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PROTOBUF }}" != "true" ]; then
            echo "VALIDATE_PROTOBUF=${{ inputs.VALIDATE_PROTOBUF }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON }}" != "true" ]; then
            echo "VALIDATE_PYTHON=${{ inputs.VALIDATE_PYTHON }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_BLACK }}" != "true" ]; then
            echo "VALIDATE_PYTHON_BLACK=${{ inputs.VALIDATE_PYTHON_BLACK }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_FLAKE8 }}" != "true" ]; then
            echo "VALIDATE_PYTHON_FLAKE8=${{ inputs.VALIDATE_PYTHON_FLAKE8 }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_ISORT }}" != "true" ]; then
            echo "VALIDATE_PYTHON_ISORT=${{ inputs.VALIDATE_PYTHON_ISORT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_MYPY }}" != "true" ]; then
            echo "VALIDATE_PYTHON_MYPY=${{ inputs.VALIDATE_PYTHON_MYPY }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_PYLINT }}" != "true" ]; then
            echo "VALIDATE_PYTHON_PYLINT=${{ inputs.VALIDATE_PYTHON_PYLINT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_R }}" != "true" ]; then
            echo "VALIDATE_R=${{ inputs.VALIDATE_R }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RAKU }}" != "true" ]; then
            echo "VALIDATE_RAKU=${{ inputs.VALIDATE_RAKU }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RENOVATE }}" != "true" ]; then
            echo "VALIDATE_RENOVATE=${{ inputs.VALIDATE_RENOVATE }}" >> $GITHUB_ENV
          fi
                  
          if [ "${{ inputs.VALIDATE_RUBY }}" != "true" ]; then
            echo "VALIDATE_RUBY=${{ inputs.VALIDATE_RUBY }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_BUILTIN }}" != "true" ]; then
            echo "VALIDATE_PHP_BUILTIN=${{ inputs.VALIDATE_PHP_BUILTIN }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_PHPCS }}" != "true" ]; then
            echo "VALIDATE_PHP_PHPCS=${{ inputs.VALIDATE_PHP_PHPCS }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_PHPSTAN }}" != "true" ]; then
            echo "VALIDATE_PHP_PHPSTAN=${{ inputs.VALIDATE_PHP_PHPSTAN }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PHP_PSALM }}" != "true" ]; then
            echo "VALIDATE_PHP_PSALM=${{ inputs.VALIDATE_PHP_PSALM }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_POWERSHELL }}" != "true" ]; then
            echo "VALIDATE_POWERSHELL=${{ inputs.VALIDATE_POWERSHELL }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PROTOBUF }}" != "true" ]; then
            echo "VALIDATE_PROTOBUF=${{ inputs.VALIDATE_PROTOBUF }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON }}" != "true" ]; then
            echo "VALIDATE_PYTHON=${{ inputs.VALIDATE_PYTHON }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_BLACK }}" != "true" ]; then
            echo "VALIDATE_PYTHON_BLACK=${{ inputs.VALIDATE_PYTHON_BLACK }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_FLAKE8 }}" != "true" ]; then
            echo "VALIDATE_PYTHON_FLAKE8=${{ inputs.VALIDATE_PYTHON_FLAKE8 }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_ISORT }}" != "true" ]; then
            echo "VALIDATE_PYTHON_ISORT=${{ inputs.VALIDATE_PYTHON_ISORT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_MYPY }}" != "true" ]; then
            echo "VALIDATE_PYTHON_MYPY=${{ inputs.VALIDATE_PYTHON_MYPY }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_PYTHON_PYLINT }}" != "true" ]; then
            echo "VALIDATE_PYTHON_PYLINT=${{ inputs.VALIDATE_PYTHON_PYLINT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_R }}" != "true" ]; then
            echo "VALIDATE_R=${{ inputs.VALIDATE_R }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RAKU }}" != "true" ]; then
            echo "VALIDATE_RAKU=${{ inputs.VALIDATE_RAKU }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RENOVATE }}" != "true" ]; then
            echo "VALIDATE_RENOVATE=${{ inputs.VALIDATE_RENOVATE }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RUBY }}" != "true" ]; then
            echo "VALIDATE_RUBY=${{ inputs.VALIDATE_RUBY }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RUST_2015 }}" != "true" ]; then
            echo "VALIDATE_RUST_2015=${{ inputs.VALIDATE_RUST_2015 }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RUST_2018 }}" != "true" ]; then
            echo "VALIDATE_RUST_2018=${{ inputs.VALIDATE_RUST_2018 }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RUST_2021 }}" != "true" ]; then
            echo "VALIDATE_RUST_2021=${{ inputs.VALIDATE_RUST_2021 }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_RUST_CLIPPY }}" != "true" ]; then
            echo "VALIDATE_RUST_CLIPPY=${{ inputs.VALIDATE_RUST_CLIPPY }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_SCALAFMT }}" != "true" ]; then
            echo "VALIDATE_SCALAFMT=${{ inputs.VALIDATE_SCALAFMT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_SHELL_SHFMT }}" != "true" ]; then
            echo "VALIDATE_SHELL_SHFMT=${{ inputs.VALIDATE_SHELL_SHFMT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_SNAKEMAKE_LINT }}" != "true" ]; then
            echo "VALIDATE_SNAKEMAKE_LINT=${{ inputs.VALIDATE_SNAKEMAKE_LINT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_SNAKEMAKE_SNAKEFMT }}" != "true" ]; then
            echo "VALIDATE_SNAKEMAKE_SNAKEFMT=${{ inputs.VALIDATE_SNAKEMAKE_SNAKEFMT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_STATES }}" != "true" ]; then
            echo "VALIDATE_STATES=${{ inputs.VALIDATE_STATES }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_SQL }}" != "true" ]; then
            echo "VALIDATE_SQL=${{ inputs.VALIDATE_SQL }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_SQLFLUFF }}" != "true" ]; then
            echo "VALIDATE_SQLFLUFF=${{ inputs.VALIDATE_SQLFLUFF }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TEKTON }}" != "true" ]; then
            echo "VALIDATE_TEKTON=${{ inputs.VALIDATE_TEKTON }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TERRAFORM_FMT }}" != "true" ]; then
            echo "VALIDATE_TERRAFORM_FMT=${{ inputs.VALIDATE_TERRAFORM_FMT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TERRAFORM_TERRASCAN }}" != "true" ]; then
            echo "VALIDATE_TERRAFORM_TERRASCAN=${{ inputs.VALIDATE_TERRAFORM_TERRASCAN }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TERRAFORM_TFLINT }}" != "true" ]; then
            echo "VALIDATE_TERRAFORM_TFLINT=${{ inputs.VALIDATE_TERRAFORM_TFLINT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TERRAGRUNT }}" != "true" ]; then
            echo "VALIDATE_TERRAGRUNT=${{ inputs.VALIDATE_TERRAGRUNT }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TSX }}" != "true" ]; then
            echo "VALIDATE_TSX=${{ inputs.VALIDATE_TSX }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TYPESCRIPT_ES }}" != "true" ]; then
            echo "VALIDATE_TYPESCRIPT_ES=${{ inputs.VALIDATE_TYPESCRIPT_ES }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_TYPESCRIPT_STANDARD }}" != "true" ]; then
            echo "VALIDATE_TYPESCRIPT_STANDARD=${{ inputs.VALIDATE_TYPESCRIPT_STANDARD }}" >> $GITHUB_ENV
          fi

          if [ "${{ inputs.VALIDATE_JAVASCRIPT_STANDARD }}" != "true" ]; then
            echo "VALIDATE_JAVASCRIPT_STANDARD=${{ inputs.VALIDATE_JAVASCRIPT_STANDARD }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_JSCPD }}" != "true" ]; then
            echo "VALIDATE_JSCPD=${{ inputs.VALIDATE_JSCPD }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_XML }}" != "true" ]; then
            echo "VALIDATE_XML=${{ inputs.VALIDATE_XML }}" >> $GITHUB_ENV
          fi
          
          if [ "${{ inputs.VALIDATE_YAML }}" != "true" ]; then
            echo "VALIDATE_YAML=${{ inputs.VALIDATE_YAML }}" >> $GITHUB_ENV
          fi

      - name: Lint Code Base
        uses: github/super-linter@v4

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} lint complete for commit ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  unit-test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --dev

      - name: Setup variables
        run: |
          echo "APP_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print tolower($2)}')" >> $GITHUB_ENV

      - name: Run setup
        run: |
          if [[ "${{ inputs.test-ready }}" == "true" ]]; then
            make setup
          else
            make setup || true
          fi

      - name: Run test setup
        run: |
          if [[ "${{ inputs.test-ready }}" == "true" ]]; then
            make test-setup
          else
            make test-setup || true
          fi

      - name: Run tests
        run: |
          if [[ "${{ inputs.test-ready }}" == "true" ]]; then
            make test
          else
            make test || true
          fi

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} unit test complete for commit ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  integration-test:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup variables
        run: |
          echo "APP_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print tolower($2)}')" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --dev

      - name: Run setup
        run: |
          if [[ "${{ inputs.test-ready }}" == "true" ]]; then
            make setup
          else
            make setup || true
          fi

      - name: Run test setup
        run: |
          if [[ "${{ inputs.test-ready }}" == "true" ]]; then
            make test-setup
          else
            make test-setup || true
          fi

      - name: Run tests
        run: |
          if [[ "${{ inputs.test-ready }}" == "true" ]]; then
            make test
          else
            make test || true
          fi
          
      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} integration test complete for commit ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  bump-versions:
    if: |
      always() &&
      (
        needs.unit-test.result == 'success' &&
        needs.integration-test.result == 'success'
      )
    name: Bump all versions
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup variables
        run: |
          echo "APP_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print tolower($2)}')" >> $GITHUB_ENV

      - name: Bump version  
        run: |-
          if ! test -f version; then echo "version=0.0.1" > version; fi
          version=$(grep 'version=.*' version | awk -F'=' '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          if test -f control; then sed "s/$version/$next/" -i control; fi
          if test -f ${{ env.APP_NAME }}.spec; then sed "s/$version/$next/" -i ${{ env.APP_NAME }}.spec; fi
          if test -f PKG-INFO; then sed "s/$version/$next/" -i PKG-INFO; fi
          if test -f pyproject.toml; then sed "s/$version/$next/" -i pyproject.toml; fi
          if test -f setup.py; then sed "s/$version/$next/" -i setup.py; fi
          if test -f version; then sed "s/$version/$next/" -i version; fi
          if test -f README.md; then sed "s/$version/$next/" -i README.md; fi
          if test -f chrome-plugin/manifest.json; then sed "s/$version/$next/" -i chrome-plugin/manifest.json; fi
          if test -f metadata.json; then sed "s/$version/$next/" -i metadata.json; fi
          if test -f package.json; then sed "s/$version/$next/" -i package.json; fi
          if test -f manifest.json; then sed "s/$version/$next/" -i manifest.json; fi

      - name: Push changes
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main'

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} bumped versiobs ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  create-release:
    name: Create github release
    needs: bump-versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Get version
        id: get_package_info
        run: |
            file=$(ls | grep -iE '^control$|^version$' | head -n1)
            package_version=$(grep -iE '^version[:=]' "$file" | cut -d'=' -f2 | tr -d '[:space:]')
            echo "PACKAGE_VERSION=${package_version}" >> $GITHUB_ENV
      
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: Release v${{ env.PACKAGE_VERSION }}
          body: ""
          draft: false
          prerelease: false

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} created release for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  chrome:
    if: inputs.chrome-extension != 'false'   
    name: Chrome publish
    runs-on: ubuntu-latest
    needs: create-release
    env:
      EXTENSION_ID: ${{ inputs.chrome-extension }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'chrome-plugin/**'  
  
      - name: Build
        if: steps.changes.outputs.src == 'true'
        run: |-
          cd chrome-plugin && zip -r ../chrome-extension-${{ github.sha }}.zip .
  
      - name: Archive chrome-extension artifact
        if: steps.changes.outputs.src == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-${{ github.sha }}
          path: chrome-extension-${{ github.sha }}.zip

      - name: Download bundle artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: chrome-extension-${{ github.sha }}

      - name: Install webstore cli
        run: |-
          npm install -g chrome-webstore-upload-cli

      - name: Upload step
        run: |-
          chrome-webstore-upload upload --source chrome-extension-${{ github.sha }}.zip --extension-id ${{ env.EXTENSION_ID }} --client-id ${{ secrets.CI_GOOGLE_CLIENT_ID }} --client-secret ${{ secrets.CI_GOOGLE_CLIENT_SECRET }} --refresh-token ${{ secrets.CI_GOOGLE_REFRESH_TOKEN }} --auto-publish

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} pushed chrome plugin for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  pypi:
    if: inputs.pypi-extension != 'false'
    name: Pypi publish
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Build
        run: |-
          pip3 install trove-classifiers ptyprocess msgpack lockfile distlib tomlkit tomli shellingham rapidfuzz pyrsistent poetry-core platformdirs pkginfo pexpect packaging jeepney jaraco.classes filelock dulwich crashtest cachecontrol virtualenv SecretStorage jsonschema cleo keyring poetry-plugin-export poetry bumpver
          python3 -m pip install --upgrade pip build setuptools wheel twine
          python3 -m pip install --upgrade --force-reinstall "packaging>=24.2"          
          python3 -m build
    
      - name: Upload step
        run: |-
          # shellcheck disable=SC2035
          printf "[pypi]\n  username = __token__\n  password = ${{ secrets.PYPI_TOKEN }}" > ~/.pypirc
          # shellcheck disable=SC2035
          python3 -m twine upload --verbose --non-interactive --config-file ~/.pypirc --repository pypi dist/*

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} pushed pypi module for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  gnome:
    if: inputs.gnome-extension != 'false'
    name: Gnome publish
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '*.js'
              - '*.json'
              - '*.css'
              - 'images/**'
              - 'schemas/**'
              - 'icons/**'
                      
      - name: Build
        run: |-
          # shellcheck disable=SC2035
          sed -i 's#^\s\+log#// log#g' *.js 
          # shellcheck disable=SC2035
          zip gnome-extension-${{ github.sha }}.zip icons/** schemas/** metadata.json *.js *.css
      - name: Install publisher
        run: |-
          pip install gnome-extension-publisher
          
      - name: Publish
        run: |-
          bash -c "gep publisharchive --username \"${{ secrets.CI_USERNAME }}\" --password \"${{ secrets.CI_PASSWORD }}\" --file gnome-extension-${{ github.sha }}.zip";
      
      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} published gnome plugin for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  pling:
    if: inputs.pling != 'false'
    name: Pling publish
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
                      
      - name: Install publisher
        run: |-
          pip install pling-publisher
          
      - name: Publish
        run: |-
          bash -c "pling publish --username \"${{ secrets.CI_USERNAME }}\" --password \"${{ secrets.CI_PASSWORD }}\" --project-id ${{ inputs.pling }}";

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} published pling release for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  deb:
    if: inputs.deb-build != 'false'
    name: Deb publish
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Build Debian package
        run: make deb

      - name: Get package name and version
        id: get_package_info
        run: |
          package_name=$(grep '^Package:' control | cut -d' ' -f2-)
          package_version=$(grep '^Version:' control | cut -d' ' -f2-)
          echo "PACKAGE_NAME=${package_name}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${package_version}" >> $GITHUB_ENV  

      - name: Store Debian package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ env.PACKAGE_VERSION }}.deb
          path: ./*.deb
      
      - name: Set asset path
        run: echo "ASSET_PATH=${{ env.PACKAGE_NAME }}_${{ env.PACKAGE_VERSION }}.deb" >> $GITHUB_ENV

      - name: Get Release Information
        id: get_release_info
        run: |
          UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.PACKAGE_VERSION }} | jq -r '.upload_url')
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      - name: Upload Debian package as release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.PACKAGE_NAME }}_${{ env.PACKAGE_VERSION }}.deb
          asset_content_type: application/octet-stream

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} created deb for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  rpm:
    if: inputs.rpm-build != 'false'
    name: Rpm publish
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Env
        run: |
          echo "APP_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print tolower($2)}')" >> $GITHUB_ENV
  
      - name: Build RPM package
        run: make rpm

      - name: Get package name and version
        id: get_package_info
        run: |
          package_name=$(cat $APP_NAME.spec | grep Name | cut -d: -f 2 | tr -d ' ')
          package_version=$(grep '^Version:' control | cut -d' ' -f2-)
          echo "PACKAGE_NAME=${package_name}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${package_version}" >> $GITHUB_ENV  

      - name: Store rpm package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-0.${{ env.PACKAGE_VERSION }}.rpm
          path: ./rpmbuild/RPMS/x86_64/${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-1.x86_64.rpm
      
      - name: Set asset path
        run: echo "ASSET_PATH=./rpmbuild/RPMS/x86_64/${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-1.x86_64.rpm" >> $GITHUB_ENV

      - name: Get Release Information
        id: get_release_info
        run: |
          UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.PACKAGE_VERSION }} | jq -r '.upload_url')
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      - name: Upload RPM package as release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-1.x86_64.rpm
          asset_content_type: application/octet-stream

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} created rpm for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  npmjs:
    if: inputs.npmjs != 'false'
    name: Npmjs publish
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Publish
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM }}   

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} published to npmjs for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  docker:
    if: inputs.docker-build != 'false'
    name: Docker publish
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Setup target name:tag
        run: |
          echo "APP_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print tolower($2)}')" >> $GITHUB_ENV
          version=$(grep 'version=.*' version | awk -F'=' '{print $2}')
          next=$(echo $version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          echo "NEXT_VERSION=$next" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: feeditout
          password: ${{ secrets.DOCKER_TOKEN }}
  
      - name: Build and push to docker hub
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            feeditout/${{ env.APP_NAME }}:${{ env.NEXT_VERSION }}
            feeditout/${{ env.APP_NAME }}:latest

      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Build and push to ghcr
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ghcr.io/dmzoneill/${{ env.APP_NAME }}:${{ env.NEXT_VERSION }}
            ghcr.io/dmzoneill/${{ env.APP_NAME }}:latest

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} published container image for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  flatpak:
    if: inputs.flatpak-build != 'false'
    needs: create-release
    name: Flatpak publish
    runs-on: ubuntu-22.04    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Flatpak environment
        uses: flatpak/flatpak-builder-action@v1
      
      - name: Install dependencies
        run: |
          flatpak install flathub org.freedesktop.Platform/x86_64/22.08 org.freedesktop.Sdk/x86_64/22.08
      
      - name: Build Flatpak
        run: |
          flatpak-builder --force-clean --install-deps-from=flathub --repo=repo-dir ${{ github.workspace }}/build-dir ie.fio.dfakeseeder manifest.json
      
      - name: Publish to Flathub
        uses: flathub-infra/flatpak-github-actions/flat-manager@v1
        with:
          flat-manager-url: https://hub.flathub.org/
          repository: stable
          token: ${{ secrets.FLATHUB_TOKEN }}

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} published flatpak for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

  rebuild-profile:   
    name: Rebuild Profile
    runs-on: ubuntu-latest    
    needs: [docker, deb, rpm, gnome, pypi, chrome, pling, npmjs, flatpak]
    steps:
      - name: Rebuild profile
        run: |-
          curl -H 'Accept: application/vnd.github+json' -H 'Authorization: token ${{ secrets.PROFILE_HOOK }}' --request POST --data '{"event_type": "cicd-hook"}' https://api.github.com/repos/dmzoneill/dmzoneill/dispatches

  blog:
    runs-on: ubuntu-latest
    needs: [docker, deb, rpm, gnome, pypi, chrome, pling, npmjs, flatpak]
    if: |
      always() &&
      (
        needs.rpm.result == 'success' ||
        needs.docker.result == 'success' || 
        needs.gnome.result == 'success' || 
        needs.pypi.result == 'success' ||
        needs.chrome.result == 'success' ||
        needs.pling.result == 'success' ||
        needs.deb.result == 'success' ||
        needs.flatpak.result == 'success' ||
        true
      )
    steps:
      # Set up Python environment
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install requests

      # Run the Python script to generate and publish the blog post
      - name: Generate and Publish Blog Post
        run: |
          echo "UNSPLASH_ACCESS_KEY: $UNSPLASH_ACCESS_KEY" 
          echo "YOUTUBE_API: $YOUTUBE_API" 
          curl https://raw.githubusercontent.com/dmzoneill/dmzoneill/refs/heads/main/wp-pipeline-publisher.py -o wp-pipeline-publisher.py 
          python wp-pipeline-publisher.py 
        env:
          PROFILE_HOOK: ${{ secrets.PROFILE_HOOK }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_USER: dmzoneill
          GITHUB_API_TOKEN: ${{ secrets.PROFILE_HOOK }}
          WORDPRESS_URL: ${{ secrets.WORDPRESS_URL }}
          WORDPRESS_USERNAME: ${{ secrets.WORDPRESS_USERNAME }}
          WORDPRESS_APPLICATION: ${{ secrets.WORDPRESS_APPLICATION }}
          AI_API_KEY: ${{ secrets.AI_API_KEY }}
          AI_MODEL: ${{ secrets.AI_MODEL }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          YOUTUBE_API: ${{ secrets.YOUTUBE_API }}

      - name: Send message to Redis
        uses: dmzoneill/dmzoneill/.github/actions/redis@main
        with:
          message: "${{ github.repository }} published blog post for ${{ github.sha }}"
          redis_password: ${{ secrets.REDIS_PASSWORD }}

